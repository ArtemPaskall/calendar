{"version":3,"sources":["api/api.ts","api/moviesList.ts","Images/con-video-camera.png","Components/MovieCard/MovieCard.tsx","Components/Loader/Loader.tsx","Images/arrow_icon.svg","Images/TV-set.png","Components/Calendar/Calendar.tsx","Components/MoviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["request","url","a","fetch","result","ok","Error","json","getMoviesList","date","moviesFromServer","MovieCard","movie","className","src","show","image","camera","medium","alt","name","airdate","slice","season","number","Loader","Icon","arrow","formatDate","dateFormated","month","getMonth","day","getDate","getFullYear","join","CalendarComponent","useState","Date","setDate","navigate","useNavigate","TVset","formatMonthYear","_","d","dayjs","format","onChange","value","onClickDay","nextLabel","prevLabel","MoviesList","movies","setMovies","moviesPrevDay","setMoviesPrevDay","serverError","setServerError","noDate","setNoDate","noMovies","setNoMovies","noMoviesPrevDay","setNoPrevMovies","isLoading","setIsLoading","useParams","longList","setLongList","longListPrev","setLongListPrev","getPrevDate","year","prevDay","useEffect","undefined","then","response","moviesList","length","catch","finally","serverError1","dateFromCalendar","getErrorByType","map","id","type","onClick","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adaa5a1d.chunk.js","sourcesContent":["export async function request(url: string) {\n  const result = await fetch(url);\n\n  if (!result.ok) {\n    throw new Error('Server error');\n  }\n\n  return result.json();\n}\n","import { request } from './api';\n\nexport const BASE_URL\n  = 'https://api.tvmaze.com/schedule';\n\nexport const country = 'US';\n\nexport const getMoviesList = async (date: string) => {\n  const moviesFromServer = await request(`${BASE_URL}?country=${country}&date=${date}`);\n\n  return moviesFromServer;\n};\n","export default __webpack_public_path__ + \"static/media/con-video-camera.4dbb78ca.png\";","import './MovieCard.scss';\nimport { Movie } from '../../react-app-env';\nimport camera from '../../Images/con-video-camera.png';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard:React.FC<Props> = ({ movie }) => {\n  return (\n    <div className=\"movie-card\">\n      <img\n        src={movie.show.image === null\n          ? camera\n          : movie.show.image.medium}\n        alt=\"MovieImage\"\n      />\n      <div className=\"movie-card__content\">\n        <p>{movie.name}</p>\n        <p>{movie.airdate.slice(0, 4)}</p>\n        <div className=\"movie-card__description\">\n          <p>\n            Season:\n            {movie.season}\n          </p>\n          <p>\n            Episode:\n            {movie.number}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export default __webpack_public_path__ + \"static/media/arrow_icon.14f1d3c7.svg\";","export default __webpack_public_path__ + \"static/media/TV-set.3bca90b2.png\";","import './Calendar.scss';\nimport './CalendarComponent.scss';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport dayjs from 'dayjs';\nimport arrow from '../../Images/arrow_icon.svg';\nimport TVset from '../../Images/TV-set.png';\n\nconst Icon = () => (\n  <img src={arrow} alt=\"Icon\" />\n);\n\nexport const formatDate = (dateFormated: Date) => {\n  const month = dateFormated.getMonth() + 1;\n  const day = dateFormated.getDate();\n  const year = dateFormated.getFullYear();\n\n  const monthString = month < 10 ? (`0${month}`) : (`${month}`);\n  const dayString = day < 10 ? (`0${day}`) : (`${day}`);\n\n  return [year, monthString, dayString].join('-');\n};\n\nexport const CalendarComponent = () => {\n  const [date, setDate] = useState(new Date());\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"home-page__content\">\n        <img src={TVset} alt=\"TVset\" className=\"home-page__img\" />\n        <p className=\"home-page__description\">\n          For the list of serials,\n          please, choose the necessary\n          <br />\n          month and day.\n        </p>\n      </div>\n\n      <Calendar\n        formatMonthYear={(_, d) => dayjs(d).format('MMMM')}\n        onChange={setDate}\n        value={date}\n        onClickDay={(d) => navigate(`/movies-list/${formatDate(d)}`)}\n        nextLabel={<Icon />}\n        prevLabel={<Icon />}\n      />\n    </div>\n  );\n};\n","// import '../../App.scss';\nimport './MoviesList.scss';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getMoviesList } from '../../api/moviesList';\nimport { Movie } from '../../react-app-env';\nimport { MovieCard } from '../MovieCard/MovieCard';\nimport { Loader } from '../Loader/Loader';\nimport { formatDate } from '../Calendar/Calendar';\n\nexport const MoviesList:React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [moviesPrevDay, setMoviesPrevDay] = useState<Movie[]>([]);\n\n  const [serverError, setServerError] = useState<boolean>(false);\n  const [noDate, setNoDate] = useState<boolean>(false);\n\n  const [noMovies, setNoMovies] = useState<boolean>(false);\n  const [noMoviesPrevDay, setNoPrevMovies] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const { date } = useParams();\n\n  const [longList, setLongList] = useState<boolean>(false);\n  const [longListPrev, setLongListPrev] = useState<boolean>(false);\n\n  const getPrevDate = (d: string) => {\n    const year = +d.slice(0, 4);\n    const month = +d.slice(5, 7);\n    const day = +d.slice(8, 10);\n\n    const prevDay = new Date(year, month - 1, day - 1);\n\n    return formatDate(prevDay);\n  };\n\n  const getErrorByType = (serverError1: boolean,\n    dateFromCalendar: boolean) => {\n    switch (true) {\n      case serverError1:\n        return (<p>Server Error</p>);\n      case dateFromCalendar:\n        return (<p>Date Error</p>);\n      default:\n        return '';\n    }\n  };\n\n  const chechEmptyList = (moviesList: Movie[]) => {\n    if (moviesList.length === 0) {\n      setNoMovies(true);\n    }\n\n    return moviesList;\n  };\n\n  const chechEmptyPrevList = (moviesList: Movie[]) => {\n    if (moviesList.length === 0) {\n      setNoPrevMovies(true);\n    }\n\n    return moviesList;\n  };\n\n  const changeMoviesList = () => {\n    setLongList(!longList);\n  };\n\n  const changePrevMoviesList = () => {\n    setLongListPrev(!longListPrev);\n  };\n\n  useEffect(() => {\n    if (date === undefined) {\n      setNoDate(true);\n    } else {\n      getMoviesList(date)\n        .then((response) => chechEmptyList(response))\n        .then(response => setMovies(response))\n        .catch(() => setServerError(true))\n        .finally(() => setIsLoading(false));\n\n      getMoviesList(getPrevDate(date))\n        .then((response) => chechEmptyPrevList(response))\n        .then(response => setMoviesPrevDay(response))\n        .catch(() => setServerError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [date]);\n\n  return (\n    <>\n      {getErrorByType(serverError, noDate)}\n      {isLoading\n        ? (<Loader />)\n        : (\n          <>\n            <div className=\"movie-list\">\n              <div className=\"movie-list__date\">\n                <h2 className=\"movie-list__date-title\">\n                  {dayjs(date).format('DD MMMM YYYY')}\n                </h2>\n              </div>\n              <div>\n                <ul>\n                  {longList\n                    ? (movies.map(movie => (\n                      <li\n                        key={movie.id}\n                      >\n                        <MovieCard movie={movie} />\n                      </li>\n                    )))\n                    : (movies.slice(0, 1).map(movie => (\n                      <li\n                        key={movie.id}\n                      >\n                        <MovieCard movie={movie} />\n                      </li>\n                    )))}\n                </ul>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => changeMoviesList()}\n                >\n                  Short List\n                </button>\n              </div>\n\n              {noMovies && <p>noMovies</p>}\n            </div>\n            <div>\n              <h2>\n                {date && (dayjs(getPrevDate(date)).format('DD MMMM YYYY'))}\n              </h2>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => changePrevMoviesList()}\n              >\n                Short List\n              </button>\n              <ul>\n                {longListPrev\n                  ? (moviesPrevDay.map(movie => (\n                    <li\n                      key={movie.id}\n                    >\n                      <MovieCard movie={movie} />\n                    </li>\n                  )))\n                  : (moviesPrevDay.slice(0, 1).map(movie => (\n                    <li\n                      key={movie.id}\n                    >\n                      <MovieCard movie={movie} />\n                    </li>\n                  )))}\n              </ul>\n              {noMoviesPrevDay && <p>noMovies</p>}\n            </div>\n          </>\n        )}\n    </>\n  );\n};\n","import './App.scss';\nimport { Routes, Route } from 'react-router-dom';\nimport { MoviesList } from './Components/MoviesList/MoviesList';\nimport { CalendarComponent } from './Components/Calendar/Calendar';\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"App__header\">\n          <h1 className=\"App__title\">Super film</h1>\n        </div>\n\n        <Routes>\n          <Route path=\"/\" element={<CalendarComponent />} />\n          <Route path=\"/movies-list/:date\" element={<MoviesList />} />\n          <Route path=\"*\" element={<h3>Page not found</h3>} />\n        </Routes>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}